package BOJ.Collections;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

public class DataStructureTemplate {
    public static void main(String[] args) throws IOException {
        Test();
    }

    public static void Test() throws IOException {
        // 1차원 배열 선언(arr)
        // -1로 arr 채우기
        // 2차원 배열 선언(arr2)
        // arr2에 arr로 복사하기
        // 0 <= arr 인덱스 < 1 만큼 brr 로 복사
        // 정수 리스트 선언(list)
        // 정수 그래프 선언
        // 그래프 10만큼 초기화


        // 큐
        // 비었는지 확인 후 추가 및 제거
        // 힙 초기화 + 역정렬
        // 스택
        // 추가 및 제거
        // 셋
        // 4 포함하는지 체크 후 4 추가
        // 맵 <String, Integer>
        // 추가 2가지 버전
        // 맵에서 키와 값 추출
        // 키가 존재하지 않을 때만 새로운 값을 계산하여 Map 에 추가하고 그 값을 반환
        // 맵에서 특정 키 확인하고 변경 하거나 제거
        // 맵 <String, List<String>>
        // Alice 키 없으면 새로운 리스트 생성 후 값으로 문자열 넣기, 키 이미 존재하면 기존 list 반환
        // 디큐
        // 앞쪽 추가/제거, 뒤쪽 추가/제거


        // arr -> Integer[]
        // Integer[] -> arr
        // arr -> list
        // list -> arr
        // Integer[] -> list
        // list -> Integer[]


        // Integer[] 역정렬
        // int[] arr 정렬
        // int[] arr 역정렬
        // List 역정렬 세 가지
        // 2차원 두 번째 요소로 오름차순 정렬
        // 2차원 첫 요소로 내림차순, 두번째 요소로 오름차순 정렬


        // 문자열 str 선언과 substr 0~3
        // 문자열 배열 나누기
        // 문자열 배열 나누기 정규식
        String text = "apple, banana. cherry";
        String text2 = "[apple].ban ana,[cherry,date]";
        // 파싱 int 와 str
        // String[] -> List<String>
        // List<String> -> String[]
        // BR, BW
        // StringTokenizer, 토큰 존재 여부 및 다음 토큰
    }
}
